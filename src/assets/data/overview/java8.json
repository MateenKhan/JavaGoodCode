{
	"title": "Java 8",
	"features": [
		{
			"name": "Lamda",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {<br/>System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Method references",
			"definition": "A compact and easy form of lambda expression, Each time when you are using lambda expression to just referring a method",
			"syntax": "reference::method",
			"examples": [
        {"currentState": "small","text":"/*calling static method 'isEmpty' from 'StringUtils' class*/StringUtils.isEmpty"},
        {"currentState": "small","text":"/*calling instance method 'toString' from 'Employee' class*/new Employee()::toString"},
        {"currentState": "small","text":"/*calling constructor of 'Employee' class*/ Employee::new"}
			]
		},
		{
			"name": "Functional interfaces",
			"definition": "An Interface that contains only one abstract method is known as functional interface. It can have any number of default and static methods. It can also declare methods of object class",
			"syntax": "@FunctionalInterface",
			"examples": [
        {"currentState": "small","text":"@FunctionalInterface  interface sayable{  void say(String msg);  }"}
			]
		},
		{
			"name": "Stream API",
			"definition": "A package consists of classes, interfaces and an enum to allow functional-style operations on the elements. It performs lazy computation. So, it executes only when it requires",
			"syntax": "stream.opration1().operation2().operation3()",
			"examples": [
        {"currentState": "small","text":"Stream.iterate(1, element->element+1).filter(element->element%5==0).limit(5).forEach(System.out::println);"}
			]
		},
		{
			"name": "Default methods",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Base64 Encode Decode",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Static methods in interface",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Optional class",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Collectors class",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "ForEach() method",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Nashorn JavaScript Engine",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Parallel Array Sorting,",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Type and Repating Annotations",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "IO Enhancements",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "Concurrency Enhancements",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		},
		{
			"name": "JDBC Enhancements",
			"definition": "A clear and concise way to implement SAM interface(Single Abstract Method) by using an expression",
			"syntax": "(argument-list) -> {body} ",
			"examples": [
        {"currentState": "small","text":"() -> {  System.out.println(\"Body of no parameter \")  }  "},
        {"currentState": "small","text":"(p1) -> {  System.out.println(\"Body of one parameter \")  }  "}
			]
		}
	]
}
